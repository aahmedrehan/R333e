pragma solidity ^0.4.25;

// library that we use in this contract for valuation
library SafeMath {
  function mul(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal constant returns (uint256) {
    assert(b > 0); 
    uint256 c = a / b;
    assert(a == b * c + a % b); 
    return c;
  }

  function sub(uint256 a, uint256 b) internal constant returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
    // interface of your Customize token
    interface R33eToken {
        
        function balanceOf(address _owner) public view returns (uint256 balance);
        function transfer(address _to, uint256 _value) returns(bool);    
        function transferFrom(address _from, address _to, uint256 _value)  returns(bool);
        function approve(address _spender, uint256 _value) returns(bool);
        function allowance(address _owner, address _spender) constant returns(uint256);
        
        event Transfer(address indexed _from, address indexed _to, uint256 _value);
        event Approval(address indexed _owner, address indexed _spender, uint256 _value);
        
    }

    // ERC20 Customize Token Smart Contract
    contract R33e is R33eToken {
        
        string public constant name = "R33e";
        string public constant symbol = "R33";
        uint8 public constant decimals = 18;
        uint public _totalSupply = 333333333;
       // uint public _ownerBalance = 100000000;
        uint256 public RATE = 1;
        
        using SafeMath for uint256;
        address public owner;
        
         // Functions with this modifier can only be executed by the owner
         modifier onlyOwner() {
            if (msg.sender != owner) {
                throw;
            }
             _;
         }
     
        // Balances for each account
        mapping(address => uint256) balances;
        // Owner of account approves the transfer of an amount to another account
        mapping(address => mapping(address=>uint256)) allowed;


        // Constructor
        constructor() public {
            owner = msg.sender; 
            balances[owner] = _totalSupply;
        }
        
    // Get the account balance of another account with address _owner    
    function balanceOf(address _owner) public view returns (uint256 balance){
            return balances[_owner];
        }    
    
    // Transfer the balance from owner's account to another account 
    // Transer at your own account different account by using this function 
    function transfer(address _to, uint256 _value) returns(bool) {
            require(balances[msg.sender] >= _value && _value > 0 );
            balances[msg.sender] = balances[msg.sender].sub(_value);
            balances[_to] = balances[_to].add(_value);
            Transfer(msg.sender, _to, _value);
            return true;
        }
        
    // Send _value amount of tokens from address _from to address _to
    function transferFrom(address _from, address _to, uint256 _value)  returns(bool) {
        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        Transfer(_from, _to, _value);
        return true;
    } 
    
    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.
    // If this function is called again it overwrites the current allowance with _value.
    function approve(address _spender, uint256 _value) returns(bool){
        allowed[msg.sender][_spender] = _value; 
        Approval(msg.sender, _spender, _value);
        return true;
    }

    // Returns the amount which _spender is still allowed to withdraw from _owner
    function allowance(address _owner, address _spender) constant returns(uint256 remainig){
        return allowed[_owner][_spender];
    }
   
}
        
